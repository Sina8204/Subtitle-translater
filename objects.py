from deep_translator import GoogleTranslator as gt # It is for translate
from persian_converter import fprint #for convert persian
from arabic_reshaper import reshape #fix persian font 1
from bidi.algorithm import get_display #fix persian font 2
import os


class translator (gt):
    def __init__(self, source: str = "auto", target: str = "fa", proxies: dict | None = None, **kwargs):
        super().__init__(source, target, proxies, **kwargs)

    
    def translate(self, text: str , **kwargs) -> str:
        self.text = text
        with open(text , 'r' , encoding = 'utf-8') as file: #text is address file. it open it and write that and then save them in the self.content
            self.content = file.read()
        self.output = super().translate(self.content, **kwargs) # it translate to persain but with bad font
        self.output = self.output.replace('gt;', '')
        self.converted_text = fprint(self.output) # it convert to the farsi font but now it's bad 
        self.reshaped_text = reshape(self.converted_text) # so we try to fix that
        self.bidi_text = get_display(self.reshaped_text) # now it's fix :)
        
        return self.bidi_text
    
    def make_sub (self , file_name): # this function make our subtitle file
        self.file_name = file_name 
        with open(self.file_name , 'a' , encoding='utf-8') as file : 
            file.write (self.bidi_text)
    
    @property
    def len_file_text (self):
        with open(self.text , 'r' , encoding = 'utf-8') as file: #text is address file. it open it and write that and then save them in the self.content
            self.content = file.read()
        return len (self.content)

class fix_sub :
    def __init__(self) -> None:
        self.firstText = [
            '[Script Info]\n' ,
            '; Script generated by Aegisub 3.2.2\n' ,
            '; http://www.aegisub.org/\n' ,
            'Title: Default Aegisub file\n' ,
            'ScriptType: v4.00+\n' ,
            'WrapStyle: 0' ,
            'ScaledBorderAndShadow: yes\n' ,
            'YCbCr Matrix: None\n' ,
            '\n' ,
            '[Aegisub Project Garbage]\n' ,
            'Last Style Storage: Default\n' ,
            'Active Line: 2\n' ,
            '\n'
            '[V4+ Styles]\n' ,
            'Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n' ,
            'Style: Default,B Nazanin,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,2\n' ,
            '\n'
            '[Events]\n' ,
            'Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n'
        ]
    
    def get_file (self , path):
        self.path = path
        with open (self.path , 'r' , encoding = 'utf-8') as file:
            self.sub = file.read()
    
    def get_times (self):
        self.fixTime = []
        self.time = self.sub.split('\n')
        self.time[0] = '1'
        for i in self.time :
            if '-->' in i :
                continue
            else : 
                self.time.remove(i)
        
        for i in self.time :
            if i == '' :
                self.time.pop(self.time.index(i))
        
        for i in range (0 , len(self.time) , 1):
            index = 0
            self.fixTime.append(self.time[i].split('-->'))
            for j in self.fixTime[i]:
                j = j.strip()
                j = j[1 : 11]
                j = j.replace(',', '.')
                self.fixTime[i][index] = j
                index += 1
        
        # print (self.time)
        # print (self.fixTime)

        for i in range (0 , len (self.time) , 1 ):
            self.time[i] = self.time[i].split('-->')

        self.time.insert(0 , 'times_list')
        self.fixTime.insert(0 , 'times_list')
        #print (self.time)
        #print (self.firstTime[0])
    
    def get_subs (self):
        self.subs = self.sub.split('\n')
        self.subs[0] = '1'
        self.makeTime = []
        self.Backup = []
        self.makeSub = []

        for i in self.time[1 : ] :
            self.Backup = '-->'.join(i)
            self.makeTime.append(self.Backup)
            self.Backup = ''
        
        for j in self.makeTime :
            self.subs.remove(j)
        
        # for z in range (1 , self.subs.count('') + 1 , 1):
        #     if str(z) in self.subs :
        #         self.subs.remove(str(z))
        
        for z in range (0 , len (self.subs) , 1):
            x = self.subs[z]
            if x.isdigit() :
                self.subs[z] = 'None'
        
        for w in self.subs :
            if w == '' :
                self.subs.pop (self.subs.index(w))
        
        for x in self.subs:
            if x == 'None':
                continue
            else :
                self.makeSub.append(x)
        
        self.subs.clear()
        self.subs += self.makeSub
        self.makeSub.clear()

        self.subs.insert(0 , 'Sub_list')
        #print (self.subs)
        #print(self.makeSub)
    @property
    def len_list_sub (self):
        return len (self.subs)
    
    
    def make_fix_sub (self , file_name , mode = 0):
        #self.subs
        #self.fixTime
        #self.check_first_time_doing = False
        
        if mode == 0 :
            with open(file_name , 'a' , encoding='utf-8') as file :
                for i in self.firstText:
                    file.write (i)
                #
                self.firstText.clear()
                for i in range (1 , len(self.subs) , 1):
                    try :
                        file.write (f"Dialogue: 0,{self.fixTime[i][0]},{self.fixTime[i][1]},Default,,0,0,0,,{self.subs[i]}\n")
                    except IndexError :
                        continue
        else :
            with open(file_name , 'a' , encoding='utf-8') as file :
                for i in range (1 , len(self.subs) , 1):
                    try :
                        file.write (f"Dialogue: 0,{self.fixTime[i][0]},{self.fixTime[i][1]},Default,,0,0,0,,{self.subs[i]}\n")
                    except IndexError :
                        continue
        
        # with open (file_name , 'r' , encoding='utf-8') as file :
        #     self.now = file.read()
        

class fix_big_data :
    #our data : self.subs , self.fixTime
    def __init__ (self , path ):
        self.path = path
        self.delText = []
        self.slic_meter = 50
    
    def getFile (self):
        with open (self.path , 'r' , encoding='utf-8') as file :
            self.text = file.read()
    
    def slicFile (self , new_path , mode = 0):
        self.new_path = new_path
        self.text = self.text.split('\n')
        
        
        for i in self.text : #slicing and write in a file
            if i.isdigit() and int(i) == self.slic_meter + 1 :
                break
            else :
                with open (self.new_path , 'a' , encoding='utf-8') as file :
                    file.write(i + '\n')
                    
        
        for i in range (0 , len (self.text) , 1) : #change sliced parameters to 'None'
            if self.text[i].isdigit() and int(self.text[i]) == self.slic_meter + 1 :
                break
            else :
                self.text[i] = 'None'
        
        for j in range (0 , self.text.count('None') , 1): #remove 'None' perometers
            self.text.remove('None')
        
        #print (self.text)
        if mode == 1 :
            if os.path.isfile(self.path) :
                os.remove(self.path)
                for i in self.text :
                    with open (self.path , 'a' , encoding='utf-8') as file :
                        file.write(i + '\n')
        else :
            pass

    def remove_file (self , remov_file_path):
        self.remove_file_path = remov_file_path
        if os.path.isfile(self.remove_file_path) :
                os.remove(self.remove_file_path)
    
    def writing_file (self , path_read , path_write):
        self.path_read = path_read
        self.path_write = path_write
        with open (self.path_read , 'r' , encoding='utf-8') as file :
            self.content_read = file.read()
        
        with open (self.path_write , 'a' , encoding='utf-8') as file:
            file.write (self.content_read)
    

class fix_another_problem :
    def __init__ (self, path):
        self.path = path
        with open (self.path , 'r' , encoding='utf-8') as file :
            self.get_text = file.read()
        
        self.get_text = self.get_text.split('\n')

    def remove_repeated_elements (self):
        self.remove_file_path = self.path # Get path file to delet that
        if os.path.isfile(self.remove_file_path) :
            os.remove(self.remove_file_path) #Delet path file
        
        self.__dic_deleter_list = dict.fromkeys(self.get_text)
        self.list_fixed_text = list(self.__dic_deleter_list)
        ###
        for i in self.list_fixed_text :
            with open (self.path , 'a' , encoding='utf-8') as file :
                file.write (i + '\n')




